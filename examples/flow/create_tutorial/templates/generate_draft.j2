# Chapter Development Instructions

## Context

### Chapter Structure: 

{{chapter_structure}}


### Source Material: 

{{markdown_content}}

## Task
Transform the provided structure and content into a comprehensive chapter that engages readers through clarity and accessibility.

## Specific Requirements
1. Develop each section thoroughly, connecting concepts logically
2. Balance educational depth with approachable language
3. Include 1-2 relevant emojis per section to highlight key points (not decoratively)
4. Incorporate practical examples or scenarios that illustrate abstract concepts
5. Create smooth transitions between sections

## Style Guidelines
- Write in a conversational, straightforward tone
- Aim for 8th-9th grade reading level
- Use active voice and concrete language
- Break complex ideas into digestible paragraphs (4-5 sentences maximum)
- Vary sentence structure to maintain reader interest

## Language Constraints
- Avoid cliché, marketing hyperbole and overused phrases such as:
  * "game changer" or "revolutionary"
  * "delve into" or "breakthrough"
  * "paradigm shift" or "cutting-edge"
  * "unlock potential" or "take it to the next level"
  * "groundbreaking"
  * etc ... 

## Formatting Direction
- Use headings, subheadings, and lists to organize information
- As you generate a chapter only generate ##, ###, and #### headings
- Don't include the title of the chapter, as it will be added later
- Bold important concepts or terminology when first introduced
- Include a brief summary paragraph at the end of each major section

## Mermaid diagrams

Ensure that each diagram follows the Mermaid syntax rules and the specific type requirements.

# Perfect Mermaid Diagram Generator

## Diagram Request
Create a Mermaid diagram visualizing: [DESCRIBE YOUR CONCEPT/PROCESS HERE]
Diagram type: [SELECT ONE: flowchart/sequence/class/entity-relationship/state/gantt/pie/user-journey]

### Syntax Framework for All Mermaid Types

#### Universal Rules
1. **Node/Entity IDs**:
   * ✓ Use ONLY alphanumeric characters and underscores (a-z, A-Z, 0-9, _)
   * ✓ Keep IDs short and descriptive (e.g., `process1`, `dataInput`)
   * ✗ NEVER use spaces, hyphens, periods, or special characters in IDs
   * ✗ NEVER start IDs with numbers

2. **Text Labels**:
   * ✓ ALWAYS use double quotes for ANY text containing:
     - ✗ NEVER Parentheses
     - Avoid Special characters: `["Text: with punctuation!"]`
     - Brackets: `["Text [with] brackets"]`
     - Braces: `["Text {with} braces"]`
   * ✓ Keep text under 40 characters per line
   * ✓ Use `<br>` for line breaks, never actual line breaks in code

#### Flowchart-Specific Rules
1. **Declaration**: Always start with `flowchart TD` or `flowchart LR`

2. **Node Shapes - USE EXACTLY THESE FORMATS**:
   ```
   id1["Rectangle text"]           // Rectangle (safest option)
   id2("Rounded rectangle text")   // Rounded rectangle
   id3(["Stadium text"])           // Stadium
   id4[["Subroutine text"]]        // Subroutine
   id5[(Database text)]            // Database
   id6((Circle text))              // Circle
   id7>Flag text]                  // Flag
   id8{"Diamond text"}             // Diamond (ALWAYS use quotes for text)
   ```

3. **Connections**:
   * ✓ ALWAYS include spaces around arrows: `id1 --> id2`
   * ✓ For labels: `id1 --"Label text"--> id2`
   * ✓ Define all nodes BEFORE connecting them

### Guaranteed Working Example

```mermaid
flowchart TD
    start["Start Process"] --> input["Input Data"]
    input --> process["Process Data"]
    process --> decision{"Decision Point?"}
    decision -->|"Yes"| output1["Output Type A"]
    decision -->|"No"| output2["Output Type B"]
    output1 --> end["End Process"]
    output2 --> end
```

### Pre-Submission Error Checks
1. ✓ Are ALL node IDs simple alphanumeric without special characters?
2. ✓ Is ALL text containing special characters in double quotes?
3. ✓ Are ALL diamond nodes using format `id{"Text"}` with quotes?
4. ✓ Do ALL connections have spaces around arrows?
5. ✓ Is the diagram direction specified ONLY at the top level?
6. ✓ Are ALL nodes defined before being referenced in connections?

### Ultra-Safe Approach
When in doubt, follow these simplification rules:
1. Use only rectangle nodes with quoted text: `id["Text"]`
2. Keep all text simple and free of special characters when possible
3. Always quote ALL text regardless of content: `id["Even simple text"]`
4. Use only simple connections: `id1 --> id2`
