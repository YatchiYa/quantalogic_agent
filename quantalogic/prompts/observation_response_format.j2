# Task Execution Analysis

📊 Iteration: {{ iteration }}/{{ max_iterations }}

### Current Task
```
{{ task_to_solve_summary }}
```

### Task Complexity
🎯 Level: [Simple|Standard|Complex]
📈 Progress: {{ progress_percentage }}%
⏱️ Time Elapsed: {{ elapsed_time }}

### Available Resources
🛠️ Tools: {{ tools_prompt }}
📦 State: {{ variables_prompt }}

### Last Action Result
Tool: {{ last_executed_tool }}
Status: {{ 'SUCCESS' if last_executed_tool else 'NO_TOOL_EXECUTED' }}
<{{ variable_name }}>
{{ response_display }}
</{{ variable_name }}>

{% if progress_metadata %}
### Progress Tracking
Step: {{ progress_metadata.step }}/{{ progress_metadata.total_steps }}
Progress: {{ progress_metadata.percentage }}%
Status: {{ progress_metadata.status }}
{% if progress_metadata.error %}
Error: {{ progress_metadata.error }}
{% endif %}
{% endif %}

{% if execution_error %}
### Error Details
```
{{ execution_error }}
```
{% endif %}

### Response Requirements

[IF Simple Task]
Provide focused solution in TWO blocks:

1. Analysis Block (<thinking>):
   • Track tool call count (max 2)
   • Validate action result
   • Confirm completion status
   • If not complete after 2 calls:
     - Escalate to standard complexity
     - Request user guidance

2. Action Block (<action>):
   • Execute precise tool call
   • Use clear parameters
   • Include completion criteria

[ELSE]
Provide detailed analysis in TWO blocks:

1. Analysis Block (<thinking>):
   • Update progress tracking
   • Evaluate action results
   • Determine next step
   • Track completion status
   • Handle any errors

2. Action Block (<action>):
   • Select ONE tool
   • Use variable interpolation
   • Provide precise parameters

### Response Format

[IF Simple Task]
```xml
<thinking>
  <progress_tracker>
    • 🎯 Task Type: Simple
    • 🔄 Tool Calls: [N/2]
    • ✅ Previous Result: [Success/Failure/Error: specific error type]
    • 📊 Status: [In Progress/Need Escalation/Blocked]
  </progress_tracker>

  <quick_assessment>
    • ✅ Result: [Outcome with specific details from tool output]
    • 📊 Status: [Complete/Pending/Error]
    • ⚡ Next: [Action/Complete/Escalate/Retry with modification]
    • 🔍 Validation: [How output was validated or why it failed]
  </quick_assessment>
</thinking>

<action>
<tool_name>
  [Parameters]
</tool_name>
</action>
```

[ELSE]
```xml
<thinking>
  <progress_tracker>
    • ✅ Completed: [List each completed step with number and action: "Step 1: Action X", "Step 2: Action Y"]
    • 🎯 Current: [Active step number and full action description: "Step 3: Generate content for Z"]
    • 📝 Pending: [List remaining steps with numbers and actions: "Step 4: Write content", "Step 5: Format output"]
    • 📊 Progress: [X/Y steps] ([Calculate exact percentage]%)
  </progress_tracker>

  <execution_state>
    • 🔄 Last Result: [Detailed outcome with specific data points from response]
    • 🚫 Error Status: [None/Specific error with root cause analysis - look for "Error:" prefix in tool output]
    • ⚡ Next Action: [Plan with fallback if needed]
    • 💾 State Update: [Specific variable changes based on tool output]
    • ⚠️ Issues: [Specific blockers with proposed solutions]
    • 🔁 Loop Detection: [Identify if similar action was attempted before - compare with previous actions to avoid repeating failed operations]
  </execution_state>
</thinking>

<action>
<tool_name>
  [Parameters]
</tool_name>
</action>
```

### Critical Rules
1. ✅ Match response format to task complexity
2. 🎯 Follow execution plan strictly
3. 💾 Use variable content, not names
4. 📝 Structure output in markdown
5. 🔄 Revise plan on failures with specific modifications
6. ⚡ Complete task when all steps done
7. 🔍 Validate results before completion
8. 🚫 After 3 similar failures, try completely different approach
9. 🔁 Detect and break loops by tracking previous actions
10. 📊 Extract and use specific data points from tool responses
